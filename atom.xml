<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hatofmonkeys]]></title>
  <link href="http://blog.hatofmonkeys.com/atom.xml" rel="self"/>
  <link href="http://blog.hatofmonkeys.com/"/>
  <updated>2011-11-13T13:28:00-08:00</updated>
  <id>http://blog.hatofmonkeys.com/</id>
  <author>
    <name><![CDATA[Colin Humphreys]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Testing Pipeline]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2011/11/13/the-testing-pipeline/"/>
    <updated>2011-11-13T11:11:00-08:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2011/11/13/the-testing-pipeline</id>
    <content type="html"><![CDATA[<p>I was fortunate in being able to attend <a href="http://citconf.com/london2011/">Citcon</a> this weekend and met some wonderful, talented people. I proposed a couple of openspaces, one loosely based on <a href="blog/2011/11/06/automating-value/">automating value</a> and the other around test reuse.</p>

<p>I&#8217;ve been thinking for a while about how I see people (including myself) rewrite the same business logic in our behavioural specifications, for our integration tests, for our performance tests, for our security tests, and for our behaviour-driven monitoring. This seems counter-intuitive to someone as lazy as I am.</p>

<p>I think we should reconsider the deployment pipeline as a testing pipeline. The purpose of the pipeline is to increase confidence in the release candidate as the stages are passed. These stages can be considered as hoops for the release candidates to jump through. As new functionality is added, so the hoops will need to be tailored to ensure the new functionality is fit for purpose.</p>

<p>Here&#8217;s an idea of a delivery pipeline I&#8217;ve seen used many times before. It&#8217;s in no way ideal, nor suitable for every use case, but it provides an example for discussion:</p>

<p>Behaviours(product owner) -> unit(dev) -> <strong>code</strong>(dev) -> VCS -> unit tests(CI) -> behavioural tests(UAT) -> load tests(staging) -> security tests(staging) -> monitoring(production)</p>

<p>The issue I&#8217;m attempting to highlight is that as desired functionality is added by the product owner (typically as a feature in the backlog) and committed to a release candidate by the developer, so the hoops need to ensure that the new functionality is delivered as specified, and no regression bugs have been introduced. This typically involves either the new functionality going untested through load/security/monitoring, or a developer/operations person having to rewrite the new business logic repeatedly in the DSLs of whichever tools are used to create the hoops.</p>

<p>I&#8217;m currently using <a href="http://auxesis.github.com/cucumber-nagios/">cucumber-nagios</a> to reuse our functional behaviours for monitoring and I&#8217;ve also had some success using <a href="http://www.pushtotest.com/">PushToTest</a> with Selenium from Cucumber. I&#8217;ve yet to look at how to tackle security requirements. Please get in contact with me if you&#8217;ve had any success reusing your business logic assertions throughout your pipeline; I&#8217;d be very interested to hear about your experiences.</p>

<p>My (current) vision would be that, either as a part of or along with a release candidate, an artefact is created that outlines the business value assertions made about the candidate. As the candidate then moves through the pipeline, so the hoops are updated with the relevant assertions they need to test about the candidate. These could be a certain number of virtual users through the user journeys in the expected ratios, lack of injection holes in the application, the application&#8217;s ability to degrade gracefully through various failure modes, and anything else that&#8217;s required to establish confidence in the release candidate.</p>

<p>You should be able to make an API call to cloud-based testing providers(such as <a href="http://www.soasta.com/">Soasta</a>) so they can use your artefact to automatically test the behaviour of your application, such as external load and security tests. The feedback from these providers can be returned to your CI server for tracking over time, and form a basis for diagnosis of any assertion failures.</p>

<p>Without a fully-automated testing pipeline, I see one of two outcomes regularly at the moment:</p>

<ul>
<li>New functionality is not tested before release. This implies risk.</li>
<li>Releases are delayed while scripts are updated, and manual load/security tests booked with vendors and executed. This inhibits business agility and delays feedback cycles.</li>
</ul>


<p>I&#8217;m attempting to write an abstraction layer for Cucumber scenarios to be reused in load tests, if you&#8217;re interested in helping please get in touch. I&#8217;ll post it on the <a href="https://github.com/hatofmonkeys">Githubs</a> once I&#8217;ve got something small working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Value]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2011/11/06/automating-value/"/>
    <updated>2011-11-06T13:26:00-08:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2011/11/06/automating-value</id>
    <content type="html"><![CDATA[<p>I’ve always(well, for longer than my attention span) been a massive fan of outside-in development via BDD, in particular <a href="http://cukes.info">Cucumber</a>. Despite this affection I’ve thought it a little unusual that BDD frameworks ignore/discard the business value proposition stated at the beginning of a feature. It’s always felt like we’re saying “that’s too difficult to do anything useful with, we’ll leave that to the business idiots”. With that in mind, and being a business idiot, I’m going to attempt to construct a model for value and automate the testing of business-based assertions.</p>

<p>What I’m really trying to achieve is to extend the automated feedback cycle back into the business. The sooner the decision makers gain meaningful feedback about the impact of their decisions, the sooner they can start making useful decisions (and fewer useless ones).</p>

<p>I think this is where the devops camp needs to join forces with the <a href="http://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898">lean startup</a> people (*dev*ops*). I’m very interested in exploring if there’s any useful mileage in attempting to automate the <a href="http://en.wikipedia.org/wiki/PDCA">Deming Cycle</a>, and if there isn’t, to examine the reasons why.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/PDCA_Cycle.svg/400px-PDCA_Cycle.svg.png" alt="" /></p>

<p>Humans are great for the <strong>PLAN</strong> (hypothesise) phase, although I’ve heard and read some interesting thoughts around AI and entropy being used to automate this (Skynet++).</p>

<p>Devops and the associated tooling are great for the <strong>DO</strong> phase, and the <a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">Continuous Delivery bible</a> has had a massive impact here.</p>

<p><strong>CHECK</strong> is often currently left either to chance or abstracted via some BI monstrosity. This is where I feel we need we may benefit from exploring automating assertions on business value. Most companies I work with have some capabilities around business metrics, but they’re infrequently linked back to the planning/strategic capabilities.</p>

<p>In theory an automated system can use some form of immunity metrics to roll back if the business assertions are not met, thus providing an element of automation around the <strong>ACT</strong> phase. I’ve seen a variety of immune systems employed around business metrics, however they often seem to be used as a tactical weapon rather than strategically to inform business decisions.</p>

<p>There are clear issues with attempting any kind of valid implementation, the obvious ones being around gaining useful feedback on a value proposition. From what I’ve looked at so far, automating value raises far more questions than it answers, but if we don’t push the boundaries on automating the feedback cycle then I feel we’re just locally optimising. I’ve had some really useful input from the folks at <a href="http://www.opencredo.com/">OpenCredo</a>, who are thinking along similar (but better formulated) lines, now I’m trying to actually make this concrete.</p>

<p>At the moment I’m working on extending cucumber, specifically on <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">“Lines 2-4 are unparsed text, which is expected to describe the business value of this feature”</a>. I’d like to change this, making the business value executable (and testable) so we can assert the business value is being delivered as promised.</p>

<p>I’d like to change this</p>

<pre><code>  Feature: Addition
    In order to avoid silly mistakes
    As a math idiot
    I want to be told the sum of two numbers
</code></pre>

<p>To this</p>

<pre><code>  Feature: Addition
    In order to make 0 silly mistakes
    As a math idiot
    I want to be told the sum of two numbers
</code></pre>

<p>Or this</p>

<pre><code>  Feature: Addition
    In order to make fewer silly mistakes
    As a math idiot
    I want to be told the sum of two numbers
</code></pre>

<p>And I want to assert that delivering this feature ensures the relative/absolute quantity of silly mistakes.</p>

<p>Attempting to write the code for this has made me realise how much time I&#8217;ve wasted in meetings of late rather than making myself useful, so if you’d like to lend a hand on the implementation of these ideas, please get in contact. I’ll post on this blog when I get the proof of concept up on the <a href="https://github.com/hatofmonkeys">Githubs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devops Days]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2011/11/04/devops-days/"/>
    <updated>2011-11-04T14:35:00-07:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2011/11/04/devops-days</id>
    <content type="html"><![CDATA[<p>I had the good fortune to attend <a href="http://devopsdays.org/events/2011-goteborg/">Devopsdays Goteborg</a> a few weeks back, and met a whole bunch of wonderful people. Many thanks to the legendary, words-cannot-do-this-man-justice <a href="http://www.jedi.be/">Patrick Debois</a> and the other organisers.</p>

<p>Whilst there seemed to be a lots of fantastic, enlightening conversation around the devops space, there also seemed to be a lot of complaints about lack of sponsorship for devops from those people in &#8220;the business&#8221;. I took my usual subtle, sensitive approach to a perceived problem and proposed an exploratory openspace entitled &#8220;F**k devops, noone cares, where&#8217;s my money?&#8221;. Whilst I undermined myself somewhat by turning up late for my own openspace, my ideas didn&#8217;t seem to get a huge amount of traction.</p>

<p><strong>&#8220;The business case for devops&#8221;</strong> (very faint on the board)</p>

<p><img src="http://farm7.static.flickr.com/6226/6312913863_7f3b6b8e6a.jpg"></p>

<p>This was probably because there was a tools-orientated openspace happening in another room.</p>

<p><img src="http://farm7.static.flickr.com/6101/6312937459_4295fa1ed0.jpg"></p>

<p>Devops&#8217;s achilles heel is the potential it has for being introspective(ignore the ITIL/process arguments; absolute nonsense) and purely tooling focused. Changing the THEM and US attitude from dev vs ops to devops vs <a href="http://www.youtube.com/watch?v=3CiGUMQZUgU">THE MANAGEMENT</a> just shifts the issue. Patrick Debois brilliantly summarises that we should, instead, be thinking about <a href="http://www.slideshare.net/jedi4ever/devopsdays-downundervfinal">*dev*ops*</a>; unfortunately some of the devops people I&#8217;ve met seem to be more interested in teaming up against others than including them.</p>

<p>I&#8217;m taking a look at how I think we can address this problem, by perhaps changing the focus from &#8220;delivering&#8221; to &#8220;delivering value&#8221;. Coming from a devops background, I&#8217;m obviously going to create a tool to help me. That should teach those management types a lesson.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2011/10/25/blogging-with-octopress/"/>
    <updated>2011-10-25T23:21:00-07:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2011/10/25/blogging-with-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://www.tumblr.com">Tumblr</a> seemed like an inappropriate place for my epic rants, so I&#8217;m giving <a href="http://octopress.org/">Octopress</a> a go. Like the cool kids do.</p>
]]></content>
  </entry>
  
</feed>
