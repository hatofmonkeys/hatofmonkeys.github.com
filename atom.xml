<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hatofmonkeys]]></title>
  <link href="http://blog.hatofmonkeys.com/atom.xml" rel="self"/>
  <link href="http://blog.hatofmonkeys.com/"/>
  <updated>2015-01-05T13:59:50+00:00</updated>
  <id>http://blog.hatofmonkeys.com/</id>
  <author>
    <name><![CDATA[Colin Humphreys]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The CloudCredo Way]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2015/01/05/the-cloudcredo-way/"/>
    <updated>2015-01-05T08:15:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2015/01/05/the-cloudcredo-way</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">5th January, Blog #12</a></h2>

<h2>The CloudCredo Way</h2>

<p>Today, January 5th, is the last day of the twelve days of Christmas, so this is the last blog in <a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">The Twelve Blogs of Christmas</a>. I survived. I may not have saved the best for last, but I&rsquo;ve certainly saved the most important. This post is all about people, and how to get people delivering value. Great people make great things. Great things make great profit, or so I&rsquo;m hoping.</p>

<h3>Explicit or implicit culture</h3>

<p>This post is about growing the culture within my company, <a href="http://www.cloudcredo.com/">CloudCredo</a>, and the processes we use. I&rsquo;ve spoken to many senior people in technology that believe you shouldn&rsquo;t tell developers how to develop, and should just let them get on with it. I firmly disagree with that opinion. I think a company should be clear about how you want to deliver value, and you will then attract people that &lsquo;fit&rsquo; your culture. If you don&rsquo;t choose a way of working you are effectively saying &ldquo;We let the senior staff bully the junior staff, code like cowboys, and do whatever they like.&rdquo;. But that&rsquo;s just my opinion.</p>

<p>I presented most of this content at <a href="http://www.meetup.com/Extreme-Programmers-London/events/196398322/">Extreme Programmers London</a> and had a great response. I thoroughly recommend attending their meetups.</p>

<h3>Programming The Extremely Pivotal Way</h3>

<p>I have been massively influenced by <a href="http://www.slideshare.net/motochan/agile-the-pivotal-way-compressed">&ldquo;The Pivotal Way&rdquo;</a>, in fact our working practices emulate it in most aspects. Imitation is the sincerest form of flattery. I had the tremendous good fortune to be invited to spend a few months in <a href="http://www.cloudfoundry.org/dojo/index.html">Pivotal&rsquo;s Cloud Foundry Dojo</a> (I believe I may have been the first person through it) during CloudCredo&rsquo;s early days, which was an amazing experience. I&rsquo;ve taken those learnings into CloudCredo and iterated on them.</p>

<p>We&rsquo;re using the processes to deploy and develop agile platforms and infrastructure &ndash; pair-programming test-driven development with our clients. We use the <a href="http://www.pivotaltracker.com/">Tracker</a>-based planning process to empower authoritative product managers to prioritise bugs and features on multi-functional teams. You could call them &lsquo;devops&rsquo; teams but I think that label has had all possible value eroded; they&rsquo;re teams focused on delivering business value. You write it, you run it.</p>

<h3>A process of feedback loops</h3>

<p>I&rsquo;m obsessed with fast feedback: I view the process as a set of shrinking feedback loops, making their way inwards towards the continuous feedback of pair programming, and expanding back out again. These loops are a good starting point until you find something that might work better. Have the courage to experiment. This content is <em>severely</em> abridged for brevity.</p>

<p>0. Pre-inception &ndash; qualify readiness to start the process</p>

<p>1. Inception &ndash; reach team consensus on a meaningful step forward, typically three about three months</p>

<p>2. Iteration Planning Meeting &ndash; plan the next iteration, pointing</p>

<p>3. Standup &ndash; today&rsquo;s work and pairs</p>

<p>4. TDD (for design, refactoring, confidence, and numerous other reasons)</p>

<ul>
<li>Pairing (remove distractions, stop cowboy coding, skills transfer, and numerous other reasons)</li>
</ul>


<p>4. Acceptance &ndash; by an empowered product manager, the &lsquo;CEO of the product&rsquo;</p>

<p>3. Standup &ndash; helps/interestings/blockers from yesterday</p>

<p>2. Retrospective &ndash; can we improve how we&rsquo;re delivering? The first derivative of delivery.</p>

<p>1. Review &ndash; can we improve how we&rsquo;re improving on delivery? The second derivative of delivery.</p>

<h3>Why now?</h3>

<p>Over the course of my career I&rsquo;ve delivered many projects using a traditional &ldquo;up-front architecture&rdquo; approach, heavy on Gantt charts and light on prototypes. This was necessary when procuring servers (and the data centre space for them to live in) took months if not years. The cost of change for the infrastructure was massive; similar to changing the foundations beneath a skyscraper. The architecture needed to be right, and IT processes evolved around these assumptions.</p>

<p>The big change in our industry has been the increased agility of infrastructure. A six-month server procurement has become a thirty-millisecond container-starting API call. Infrastructure is now defined as code. The incredibly low cost of change means we can now use a process that embraces, rather than resists, change &ndash; and that process is <a href="http://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming(XP)</a>.</p>

<h3>Why not Six Sigma?</h3>

<p>Six Sigma is a fantastic methodology for eliminating defects and minimising deviation. Six Sigma is easy to implement with software: <code>cp -ra</code>. It&rsquo;s less relevant when developing and running new services, where learning is more important.</p>

<h3>Why not Scrum?</h3>

<p>Scrum and XP are both agile methodologies although I believe XP has a greater focus on learning. XP embraces change during sprints/iterations, Scrum favours commitments. XP is a more holistic process, recommending engineering practices such as TDD and pair-programming. As mentioned above, I see value in forming explicit opinions on these practices.</p>

<h3>Why not Kanban?</h3>

<p>Tracker-based planning is actually a software-development-domain specific implementation of Kanban. Blur your eyes and you can see the swim lanes. Achieving and maintaining stable delivery flow is very important.</p>

<h3>Learning</h3>

<p>As we&rsquo;re building and deploying new systems and services we need to embrace learning as we make progress. We&rsquo;re helping our clients to learn &ndash; and we&rsquo;re using a process that facilitates learning and embraces change based on that learning. Between competing organisations the organisation that can learn fastest, and channel its efforts in the right direction, will win. We learn through feedback loops such as <a href="http://en.wikipedia.org/wiki/PDCA">PDCA</a>, <a href="http://en.wikipedia.org/wiki/OODA_loop">OODA</a> &ndash; both developments of <a href="http://en.wikipedia.org/wiki/Scientific_method">scientific method</a>.</p>

<p>The focus of XP is learning. Learn about what you&rsquo;re building so you can adjust your plans as you find out what&rsquo;s good and what&rsquo;s bad about what you&rsquo;re building. Learn about <em>how</em> you&rsquo;re building it; what&rsquo;s working and what needs adjustment. Use emergent velocity for data-driven planning.</p>

<h3>Supporting processes</h3>

<p>There are a number of patterns we&rsquo;re using to support our chosen methodology. Here&rsquo;s a small selection:</p>

<ul>
<li>Continuous Delivery &ndash; start with a strawman (a test, a repository, a CI server) and continue delivering from there</li>
<li>Microservices &ndash; people can&rsquo;t solve big problems: divide and conquer</li>
<li>Release trains &ndash; continuously deliver all the things into an integration pipeline. If you want to &lsquo;tag&rsquo; a release, run a release train through the last known good versions from the pipeline. Choo choo!</li>
</ul>


<h3>Openness and communication</h3>

<p>This information begs an obvious question: if this is CloudCredo&rsquo;s secret sauce, why would I blog about it publicly? This again comes back to XP, and two of XP&rsquo;s core values &ndash; courage and communication. I have the courage to lay CloudCredo&rsquo;s approach bare for all to see. If we&rsquo;re not working in the right way, or there&rsquo;s flaws, I hope they will be pointed out so we can improve. We&rsquo;re continuously trying to improve. Please <a href="http://www.cloudcredo.com/contact-us/">get in contact</a> if you&rsquo;ve got any feedback.</p>

<hr />

<p>If you&rsquo;ve been thoroughly confused by the UK Garage links at the end of all the <a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">Twelve Blogs of Christmas</a>, well, maybe it&rsquo;s <a href="https://www.youtube.com/watch?v=obZIZWzlJa8">a London thing</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Build Stuff]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2015/01/04/how-i-build-stuff/"/>
    <updated>2015-01-04T08:06:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2015/01/04/how-i-build-stuff</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">4th January, Blog #11</a></h2>

<h2>How I Build Stuff</h2>

<p>This is likely to be the most nonsensical of my thoroughly nonsensical <a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">Twelve Blogs of Christmas</a>. I wanted to capture the recurring themes of the processes I&rsquo;ve employed when bringing software to life; from inception to massive scale. Everything here should be overridden by domain-specific knowledge/concerns as appropriate. Or ignored altogether :)</p>

<h3>Don&rsquo;t build anything</h3>

<p>If you&rsquo;ve had an idea for something, it&rsquo;s probably already been done. Go and have a look. If your idea hasn&rsquo;t been done it&rsquo;s probably quite likely you can reskin/resell/repackage/repurpose a current service to deliver the new service you&rsquo;re hoping people will find valuable.</p>

<h3>Start at the top, not the bottom</h3>

<p>If your idea hasn&rsquo;t been developed before, look for two or more currently running services you can combine to create the value. Use SaaS. If you have to write software, host it in a PaaS that does as much heavy lifting as possible. Don&rsquo;t start with infrastructure and build upwards. You don&rsquo;t have time, and you&rsquo;ve got better things to do.</p>

<h3>Get feedback from day 1</h3>

<p>Get meaningful feedback about your service as soon as possible. Your idea is probably stupid, and you should stop (or pivot). That&rsquo;s the harsh reality of the situation. Continue getting feedback about your decisions as fast as possible and as frequently as possible. Your ability to gain and act on feedback will be the key determinant of the success or failure of whatever you&rsquo;re building. Read &lsquo;The Lean Startup&rsquo;. <a href="https://github.com/hatofmonkeys/cucumber-value">Cucumber-value</a> is a rubbish piece of software, but should make you think about how you can quantify and measure real metrics for success.</p>

<h3>Use small teams that &lsquo;own&rsquo; services with business value</h3>

<p>Business services are owned by small teams. Teams own one or more (micro?) services. Use <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a> as a guide for breaking large problems into smaller services. Don&rsquo;t overly engineer towards microservices, let them emerge, you can break them down further at a later date. Don&rsquo;t be afraid to sacrifice your architecture if it needs replacing; you&rsquo;re learning. Hire people that learn fast; they can gain knowledge from others in the team. Use <a href="http://www.slideshare.net/motochan/agile-the-pivotal-way-compressed">&lsquo;The Pivotal Way&rsquo; &ndash; lightweight XP</a>. Initially create a Git repository per service; shared code will emerge into new repositories. Use GitHub or BitBucket &ndash; you&rsquo;re not a Git hosting service (unless that&rsquo;s your idea, and if it is, it&rsquo;s already been done).</p>

<h3>Deploy to somebody else&rsquo;s Cloud Foundry</h3>

<p>Deploy two(or more) Cloud Foundry instances per (micro)service. Use run.pivotal.io, Anynines, Fjord IT, AppFog, Bluemix, or any other hosted Cloud Foundry (not your own). Write and deploy your (micro)services quickly, in languages you can develop quickly in: we like Go and Ruby. If you need to develop in a less agile language as requirements emerge you can do that later. Don&rsquo;t be afraid to use a range of languages; the cost of doing this is mitigated by the PaaS abstraction. Kill your (micro)services and create new ones as necessary.</p>

<h3>Start with Continuous Delivery and continue to deliver</h3>

<p>Begin with a test for &lsquo;Hello World&rsquo;, an app that outputs &lsquo;Hello World&rsquo; in your chosen language/framework, and a CI server that can run your test then deploy the working software to Cloud Foundry. Iterate from there. Use Travis or Circle until you need your own Jenkins/GoCD/Concourse solution.</p>

<h3>Log problems and measure latency</h3>

<p>Log when things go wrong. Measure the latency(time from request to response) when things go right. Use Papertrail for the logs. Use New Relic for the metrics. Replace Papertrail with <a href="https://github.com/logsearch">Logsearch</a> and New Relic with Graphite when you need to.</p>

<h3>Use JSON templates</h3>

<p>Use JSON to communicate between your (micro)services. Use JSON templates as lightweight contracts between (micro)services. Use HTTPS with circuit breakers for synchronous communication. Use Redis or RabbitMQ for asynchronous communication. If your code can&rsquo;t get to Redis/RabbitMQ/another HTTP endpoint &ndash; die quickly rather than tying up resources.</p>

<h3>Lightweight data</h3>

<p>Start with JSON in Redis. Move to JSON in MongoDB when you need to query the data with more flexibility. Place your BLOBs in AWS S3. Once you know whether your data &ndash; per (micro)service &ndash; needs to be consistent or available you can change data store as required. Cassandra is a great available data store. Postgres is a great consistent data store (if you can&rsquo;t afford Oracle RAC, which you can&rsquo;t). If you&rsquo;re generating huge quantities of events throw them into Hadoop.</p>

<h3><a href="http://blog.hatofmonkeys.com/blog/2015/01/01/mutable-state/">Mutable state is the enemy</a></h3>

<p>Generate events &ndash; immutable statements of fact &ndash; based upon actions. Simple, immutable, repeatable JSON events are a great start. <a href="http://martinfowler.com/eaaDev/EventSourcing.html">Store the events in an event log</a> and use them to mutate the data stores powering consuming services &ndash; <a href="http://martinfowler.com/bliki/CQRS.html">separating commands from queries</a>.</p>

<h3>Customise Cloud Foundry when you need to</h3>

<p>Customising Cloud Foundry is remarkably easy; do it when requirements demand. Adding buildpacks, services, even stacks (<a href="http://www.cloudcredo.com/decker-docker-cloud-foundry/">I added Docker</a>) is straightforward. Don&rsquo;t start with Cloud Foundry customisation but don&rsquo;t be afraid to take the step if you need to. Deploy to your own IaaS or even your own metal if security/regulation/performance concerns necessitate it.</p>

<h3>Go fast and fail faster</h3>

<p>In summary: get fast feedback about the software you&rsquo;re bringing to life. Fail fast if you&rsquo;re doing the wrong thing. Don&rsquo;t over-engineer; do what works, deliver quickly. Realise the opportunity cost of your (and your team&rsquo;s) time. Could you be building something more valuable instead?</p>

<p><a href="https://www.youtube.com/watch?v=W_vM8ePGuRM">Christmas Garage! This one&rsquo;s relatively recent. And good.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problems With PaaS]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2015/01/03/the-problems-with-paas/"/>
    <updated>2015-01-03T07:59:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2015/01/03/the-problems-with-paas</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">3rd January, Blog #10</a></h2>

<h2>The Problems With PaaS</h2>

<p>Platform-as-a-Service(PaaS) isn&rsquo;t perfect. There are always going to be some things it does well and some things it does badly. This post takes a look at some of the things it does badly, and how we can make improvements in the future.</p>

<h3>Stateful services</h3>

<p><a href="http://compositecode.com/2013/07/27/architectural-paas-cracks-or-crack-paas/">This excellent article</a> highlights some key points related to problems with PaaS. I absolutely agree that the data service journey with current implementations is painful. I&rsquo;ve written about <a href="http://www.cloudcredo.com/">CloudCredo&rsquo;s</a> plans for <a href="http://blog.hatofmonkeys.com/blog/2015/01/02/service-foundry/">&ldquo;Service Foundry&rdquo;</a>; this is work-in-progress and needs to be an area of greater focus. Stateful services need to become first-class citizens in the PaaS landscape.</p>

<h3>Maintenance troubles</h3>

<p>I also agree that maintaining PaaSs is currently too difficult. I think this is a symptom of two separate issues. Firstly, the current crop of configuration management tools (Chef/Puppet/Salt/Ansible etc.) are not fit for the purpose of deploying and maintaining distributed systems, such as PaaSs. Secondly, <a href="http://bosh.cfapps.io/">BOSH</a> is the right tool for the job but currently has a difficult user journey. <a href="http://www.cloudcredo.com/">CloudCredo</a> have invested time and effort attempting to make BOSH easier to consume &ndash; but again it&rsquo;s another work-in-progress. We need to get better at making PaaSs easier to operate, maintain, and upgrade.</p>

<h3>Secure networking</h3>

<p><a href="https://medium.com/p/817849715f0a">Another good blog post</a> highlights how networking concerns can block PaaS adoption. Since the writing of that post a couple of advancements have been made. There is now an <a href="https://github.com/CloudCredo/bosh-ipsec">easily consumable BOSH release to enable encrypted network traffic of any BOSH-deployed service</a> &ndash; <a href="http://www.spiegel.de/media/media-35515.pdf">although we should always question how secure our encryption is</a>. There is also <a href="http://docs.cloudfoundry.org/concepts/security.html">user-configurable networking inside Cloud Foundry</a>. I believe these additions go a long way towards mitigating user concerns, but I&rsquo;d certainly be interested in further feedback related to PaaS networking.</p>

<h3>Transparency</h3>

<p>The greatest strength of PaaS is that it&rsquo;s a black box for running your applications; it allows developers to focus on delivering value rather than operating a platform. The greatest weakness of PaaS is that it&rsquo;s a black box for running your applications; when things go wrong it can be difficult to work out what&rsquo;s happening. If you application is performing poorly on Heroku, what do you do next? Spend more money and hope? <a href="http://www.cloudcredo.com/cloud-foundry-firehose-and-friends/">Cloud Foundry&rsquo;s new Firehose</a> generates huge volumes of information but can prove difficult to consume for PaaS novices. <a href="http://blog.newrelic.com/2014/10/27/cloud-foundry-java-buildpack-new-relic-2/">Buildpack integration with monitoring systems</a> is clearly helpful but we could still make enhancements in this area.</p>

<h3>Let&rsquo;s keep PaaS-bashing</h3>

<p>PaaS will only improve if we identify and expose the flaws. We need more users, more critiques, more real-world scenarios. Please <a href="http://www.cloudcredo.com/">get in contact</a> if there&rsquo;s any burning issues blocking your adoption of PaaS.</p>

<p><a href="https://www.youtube.com/watch?v=L3HMogp86cI">Christmas Garage: London &ndash; Stand Up Tall!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Foundry]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2015/01/02/service-foundry/"/>
    <updated>2015-01-02T10:58:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2015/01/02/service-foundry</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">2nd January, Blog #9</a></h2>

<h2>Service Foundry</h2>

<p>As I&rsquo;ve mentioned a few times, <a href="https://twitter.com/swardley/status/527680598543187968">Cloud Foundry has won the Platform-as-a-Service(PaaS) war for stateless 12-Factor applications</a>. <a href="http://blog.hatofmonkeys.com/blog/2014/12/30/paasaap-and-the-distro-wars/">Stateless PaaS will now be a Cloud Foundry distro war</a>. <a href="http://blog.hatofmonkeys.com/blog/2015/01/01/mutable-state/">We all know mutable state is the root of all evil</a> so I&rsquo;ve been thinking about a stateful CF-like PaaS since I first interacted with Cloud Foundry. In fact, Cloud Foundry version 1 had an <em>interesting</em> service integration, which served to highlight the gaps in the PaaS journey for stateful application developers. <a href="https://twitter.com/hatofmonkeys/status/511856493512392704">I tweeted a while back</a> about some of the work <a href="http://www.cloudcredo.com/">we&rsquo;re</a> doing in this area; this post will expand on our plans for &lsquo;Service Foundry&rsquo; &ndash; a PaaS for stateful deployments.</p>

<h3>Implementation</h3>

<ul>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/03/docker/">Docker/Rocket</a> for application packaging</li>
<li><a href="https://github.com/cloudfoundry-incubator/diego-release">Diego</a> with mutexs for scheduling</li>
<li><a href="https://github.com/coreos/etcd">Etcd</a>/<a href="https://consul.io/">Consul</a>(reused from Diego&rsquo;s deployment) for service discovery</li>
<li><a href="https://github.com/zettio/weave">Weave</a> to provide inter-container networking of clustered state</li>
<li><a href="https://github.com/clusterhq/flocker">Flocker</a> for state relocation/replication</li>
<li><a href="https://github.com/CloudCredo/bosh-ipsec">BOSH-IPSEC</a> for security of data in-flight</li>
<li>HAProxy or custom Go router for non-HTTP routing</li>
<li>Tunable sync/non-sync disk IO</li>
<li>Expose STONITH semantics to users</li>
<li>CF-like API for management</li>
<li>TBC: <a href="https://github.com/CloudCredo/kubernetes-release">Kubernetes</a> for clusters(pods) of containers</li>
</ul>


<h3>Potential</h3>

<p>It&rsquo;s interesting to consider that you could deploy Cloud Foundry itself in such a system. Does this actually look like a manifesto for BOSH version 2? Or does this look more like <a href="https://github.com/openshift/origin">OpenShift v3</a>? The Kubernetes overlap certainly suggests something similar to <a href="https://blog.openshift.com/announcing-openshift-origin-3/">RedHat&rsquo;s latest IaaS+ effort</a>.</p>

<h3>Why is this useful to users?</h3>

<p>I&rsquo;ve given talks suggesting that <a href="http://gotocon.com/berlin-2014/presentation/Simple%20Scalability%20-%20Microservices%20on%20PaaS">microservices and PaaS are the future of application development</a>. Cloud Foundry makes it <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">incredibly easy to be tall enough for stateless microservices</a>. I want users to have a similarly easy journey for the state powering their microservices.</p>

<p>If you&rsquo;d like to help with this effort please do get in contact with <a href="http://www.cloudcredo.com/contact-us/">CloudCredo</a>.</p>

<p><a href="https://www.youtube.com/watch?v=9yGT8QzVzKU">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutable State]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2015/01/01/mutable-state/"/>
    <updated>2015-01-01T13:03:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2015/01/01/mutable-state</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">1st January, Blog #8</a></h2>

<h2>Mutable State</h2>

<p>I enjoy attending developer-focused conferences &ndash; in particular <a href="http://www.qconferences.com/">QCon</a> and <a href="http://gotocon.com/">GOTO</a> &ndash; to talk to the real consumers of PaaS. I also attend infrastructure-orientated conferences as a consumer of IaaS. I was recently on the PaaS panel at the <a href="https://twitter.com/VirtualBlackCat/status/535433555271495680">Apache CloudStack Conference</a> when I made what seemed a bizarre statement to many in the audience: &ldquo;If your problem isn&rsquo;t mutable state then you&rsquo;re probably doing something wrong.&rdquo;. I&rsquo;m taking this opportunity to explain what I meant.</p>

<h3>Mutable state is the problem</h3>

<p>I&rsquo;ve actually been making statements in this vein for a long time. In my experience, when delivering solutions, you can usually find a <em>correct</em> answer to your problem, given time to research and engineer sufficiently. The majority of optimisation problems have occurred when I&rsquo;ve been facing issues related to mutable state. These generally involve functions related to latency, consistency, availability and performance. <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorum</a> is perhaps the most frequently occurring; choose availability or consistency in the face of network partitions in a distributed system. You cannot have both.</p>

<h3>Development</h3>

<p>Approaches to mutable state vary across programming paradigms. Object-orientated programming favours encapsulating mutable state in objects; usually controlling concurrent access to the mutable data via mutexs or semaphores. In my experience this can lead to heavy performance issues when scaling. Functional programming favours having no mutable state; instead passing immutable values between functions. This causes different issues as it shifts the burden to the developer to model their data &ndash; in what can sometimes be an unnatural way.</p>

<h3>Infrastructure</h3>

<p>Mutable state in Infrastructure-as-a-Service can also cause issues. VMWare&rsquo;s various infrastructure offerings favour a consistent view of the infrastructure landscape, often using Oracle or MSSQL as an ACID-compliant database for consumers to rely upon. This makes the API easy to consume but difficult to scale to huge levels for producers. Consumers can rely on their mutations being immediately reflected across the API.</p>

<p>AWS EC2 offers an eventually consistent view of their landscape. This means EC2 can be delivered at a truly unprecedented scale but can cause issues for <a href="http://blog.cloudfoundry.org/2013/06/18/dealing-with-eventual-consistency-in-the-aws-ec2-api/">platform-level consumers</a>. Intelligence must be built into the tooling that consumes the API, as large consumers of EC2, such as Netflix, have done.</p>

<h3>Platform</h3>

<p>At a Platform-as-a-Service(PaaS) level we have tended to deal with the issue of mutable state by abdicating it to external services. Stateless application hosting is a done deal &ndash; <a href="https://twitter.com/swardley/status/527680598543187968">Cloud Foundry has won that battle</a>. Stateless application developers can choose to locate their data in whichever external service best suits the data; this is the polyglot approach embraced by PaaS. The real issues arise when we attempt to provide a Cloud-Foundry-like journey for developers and operators around stateful services.</p>

<p>An increasing number of PaaS developers appear to have become preoccupied with scheduling. Scheduler debates are so hot right now. No PaaS conference would be complete without an <a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41684.pdf">Omega-style optimistic scheduler versus Mesos-style pessimistic scheduler conversation</a>. In my experience scheduling performance is rarely the constraint blocking PaaS adoption: the constraint is usually dealing with the necessary mutable state generated/consumed by the applications running in the PaaS.</p>

<h3>Two PaaSs to rule them all?</h3>

<p><a href="https://blog.openshift.com/chose-not-join-cloud-foundry-foundation-recommendations-2015">RedHat recently stated that dividing stateful and stateless services &ldquo;is an arbitrary distinction&rdquo;.</a> I don&rsquo;t agree with this perspective; I think it&rsquo;s a very important distinction. There are some key issues here &ndash; if an application container appears to have stopped functioning, what action should the PaaS take? If the container is stateless the PaaS can request a new container be started: potentially creating a duplicate. If the container is stateful the choice is more complicated. Should a new container be started, maximising service availability, but risking split-brain scenarios in a stateful environment? Should the container remain offline, reducing availability but ensuring data consistency? Should the container be restarted following a successful <a href="http://en.wikipedia.org/wiki/Fencing_%28computing%29">fencing</a> operation? What does fencing look like in a distributed, scheduled, containerised PaaS environment? These questions may lead to a separate breed of stateful PaaSs emerging focusing on stateful concerns, even if they share similar-looking APIs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cf push mysql/mysql --disk 500 --restart-policy consistent  --disk-sync immediate --io-performance high
</span><span class='line'>cf push redis/redis --disk 100 --restart-policy available --disk-sync defer --io-performance medium</span></code></pre></td></tr></table></div></figure>


<h3>BOSH</h3>

<p>The &ldquo;Two PaaS&rdquo; debate has led to some people perceiving Cloud Foundry as a stateless PaaS and BOSH as a stateful PaaS. I believe this is an incorrect interpretation. I think BOSH is a fantastic system &ndash; it has had a greater influence on me than Cloud Foundry itself &ndash; but it is not a PaaS. BOSH is the purest embodiment of the principles of Infrastructure as Code: it fires up metal, lays down code, and attaches disks for state. It is not, in its current form, a scheduler in the manner of Mesos/Omega. BOSH is the world&rsquo;s best deployer of schedulers and distributed systems. A stateful PaaS would look more like <a href="https://github.com/cloudfoundry-incubator/diego-release">Diego</a>/<a href="https://github.com/pivotal-cf-experimental/lattice">Lattice</a>, modified to address the concerns above. BOSH would be a great way to deploy this new PaaS.</p>

<p><a href="https://www.youtube.com/watch?v=hQilwacuBO0">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-Site Cloud Foundry]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/31/multi-site-cloud-foundry/"/>
    <updated>2014-12-31T10:20:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/31/multi-site-cloud-foundry</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">31st December, Blog #7</a></h2>

<h2>Multi-Site Cloud Foundry</h2>

<p><a href="http://www.cloudcredo.com/">CloudCredo&rsquo;s</a> clients often ask about how to run Cloud Foundry across multiple sites for performance and resilience. This is a natural question to ask: as an application developer, if I specify that I need to have ten instances of my application available, I expect ten instances to be available &ndash; whether the underlying infrastructure is available or not. The Platform-as-a-Service(PaaS) abstraction implies that my application should continue to run as desired, and that the PaaS should be designed to handle failures in the infrastructure layer.</p>

<h3>Choosing a CAP</h3>

<p>This idea sounds great in theory but can lead to some problems in practice. What should Cloud Foundry do, as a distributed system, in the event of a network partition? Should each partition converge on the desired state of the whole system, leading to twice the number of applications being online, and potential split-brain issues with singleton applications? Should the whole Cloud Foundry shut down to ensure application consistency? The key point to note here, which is not immediately obvious, is that whilst Cloud Foundry hosts <em>stateless</em> applications, it is actually a <em>stateful</em> system itself. This means <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a> must be obeyed; we can opt for consistency or availability in our Cloud Foundry deployment.</p>

<p>Cloud Foundry has, at its core, a Cloud Controller database maintaining the desired state of the system. If we maintain a single, consistent state of this database we will be running a CP(consistent, partition-tolerant) Cloud Foundry. If we allow multiple, divergent copies of this database we will be running an AP(available, partition-tolerant) Cloud Foundry.</p>

<h3>Consistent Cloud Foundry</h3>

<p>Cloud Foundry&rsquo;s current engineering direction seems to favour a consistent view of the desired application state. This is exhibited by the choice of <a href="http://en.wikipedia.org/wiki/Raft_%28computer_science%29">Raft</a> as a consensus algorithm, and <a href="https://github.com/coreos/etcd">Etcd</a> as an implementation, for CF&rsquo;s next generation <a href="https://github.com/cloudfoundry-incubator/diego-release">Diego</a> components. These choices pose some difficult questions:</p>

<ul>
<li>Do we suffer thundering herd issues in the event of a network partition, where all desired instances of all applications attempt to run on the nodes with access to the quorate Etcd partition?</li>
<li>How do we ensure data services, required by the applications, are accessible from the functioning side of a partition?</li>
<li>How do we ensure latency to data services from across multiple sites does not reduce application performance below acceptable levels?</li>
<li>What happens if the Cloud Foundry components themselves experience issues, degrading the service as a whole across all sites?</li>
</ul>


<p>Running a consistent Cloud Foundry makes application deployment and management very easy; there is a single API endpoint for management. At CloudCredo we deploy consistent Cloud Foundry installations across multiple availability zones within a single region. This mitigates the latency concerns and provides a convenient management structure for application deployment.</p>

<h3>Available Cloud Foundry</h3>

<p>When I&rsquo;ve needed to deploy Cloud Foundry across multiple regions it has usually been to provide for a very high availability service level. To provide for this I have deployed multiple, completely separate Cloud Foundry installations, often on heterogeneous infrastructure providers, in diverse regions. An example of this kind of installation would be the <a href="http://blog.cloudfoundry.org/2013/04/30/uk-charity-raises-record-donations-powered-by-cloud-foundry/">donations platform for Comic Relief</a>. The huge benefit of this strategy is that no outages in any individual Cloud Foundry can stop the service &ndash; availability is maximised. The two major downsides are that deployment and orchestration of applications becomes significantly more complex, and that the applications and data services need to be developed to handle being deployed in a distributed system of this nature.</p>

<h3>The Perfect Cloud Foundry?</h3>

<p>I&rsquo;m currently deploying multi-zone &lsquo;consistent CF&rsquo; &ndash; and then multi-region &lsquo;available CF&rsquo; if requirements demand it. This is a domain specific choice; and it takes a significant amount of work in the application(particularly around state) to bring multi-region availability.</p>

<p><a href="https://www.youtube.com/watch?v=RQLQ7W2RoKA">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PaaSaaP and the Distro Wars]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/30/paasaap-and-the-distro-wars/"/>
    <updated>2014-12-30T08:37:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/30/paasaap-and-the-distro-wars</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">30th December, Blog #6</a></h2>

<h2>PaaSaaP and the Distro Wars</h2>

<p><a href="https://twitter.com/swardley/status/527680598543187968">Cloud Foundry has won the PaaS war</a>. Heroku blazed the trail with their PaaS for <a href="http://12factor.net/">Twelve-Factor Apps</a>, and VMWare/Pivotal have built an open-source implementation and ecosystem to provide both enterprises and developers with an obvious choice. Buildpacks have become the standard for translation from application code to runnable unit.</p>

<p>The question is rapidly changing from &ldquo;which PaaS are you using?&rdquo; to &ldquo;which distribution of Cloud Foundry are you using?&rdquo;. Just as Hadoop became synonymous with big data so Cloud Foundry has become PaaS. The emerging battle is between the distribution vendors; Pivotal, IBM, HP and ActiveState already have offerings in the market. I&rsquo;m sure we&rsquo;ll see more from other players as the <a href="http://www.cloudfoundry.org/about/index.html">Cloud Foundry Foundation</a> gains momentum.</p>

<p>The other fascinating aspect of the development of the Cloud Foundry ecosystem is &lsquo;Platform as a Service&rsquo; versus &lsquo;Platform as a Service as a Product&rsquo;(PaaSaaP). Some vendors are offering Cloud Foundry as installable, supported software &ndash; where the onus is on the customer to deploy the software to their chosen infrastructure in order to provide a service. Other vendors are deploying and running Cloud Foundry on behalf of their uses to provide a true PaaS experience. A few vendors are offering both. Some PaaS purists have denigrated Cloud Foundry for offering this flexibility, but I see this as one of Cloud Foundry&rsquo;s greatest strengths. Developers can minimise Time-to-Value by deploying quickly to a vendor&rsquo;s cloud-based solution &ndash; and then deploy Cloud Foundry to their own infrastructure when non-functional requirements emerge to make a custom deployment necessary.</p>

<p>We will also see domain-specific Cloud Foundy implementations for particular markets. The &lsquo;core&rsquo; Cloud Foundry specification, provided by the CF Foundation, will provide a key set of capabilities and an API for developers to work against &ndash; but we will see extensions providing for additional requirements and innovation. Time will tell which flavours of Cloud Foundry are successful and which are left behind.</p>

<p><a href="https://www.youtube.com/watch?v=iWRSOtAKcMY">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twelve Factor Enterprise]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/29/twelve-factor-enterprise/"/>
    <updated>2014-12-29T10:16:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/29/twelve-factor-enterprise</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">29th December, Blog #5</a></h2>

<h2>Twelve Factor Enterprise</h2>

<p>The big paradigm shift for developers using Platform-as-a-Service(PaaS) is understanding <a href="http://12factor.net/">&ldquo;The Twelve-Factor App&rdquo;</a>; a set of patterns developed by the team at Heroku enabling applications to be orchestrated and distributed at scale. By adopting these patterns developers can take advantage of PaaS, via services such as Heroku and Cloud Foundry, reducing their operational responsibilities so they can focus on delivering value.</p>

<p>I&rsquo;ve had a long-running debate with various members of the PaaS community about 12-Factor&rsquo;s relevance to enterprises. I&rsquo;ve heard many claims that enterprises don&rsquo;t want to adopt these patterns, and would rather mix their state, config, and application together as a tangled ball of mud. At a board level the enterprises I&rsquo;ve worked for, and interacted with, have been seeking organisational agility &ndash; the kind of fast delivery and iteration PaaS brings to software development. Somehow this message often gets lost in middle management, leading to a resistance to change and clinging to legacy practices like a safety blanket.</p>

<p>We need to stop telling enterprises that modern patterns, such as 12 Factor and Microservices, won&rsquo;t work for them. We need to help enterprises to lower their time-to-value and increase their operational efficiency. The only winners from keeping enterprises stuck in the dark ages are the incumbent vendors, happy to continue charging extortionate prices for outdated systems and software.</p>

<p>Enterprises can adopt 12 Factor, Microservices, and PaaS. They want to be more agile, not less. Let&rsquo;s help them.</p>

<p><a href="https://www.youtube.com/watch?v=koZeLiJdvJk">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Containers as a Service]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/28/containers-as-a-service/"/>
    <updated>2014-12-28T09:43:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/28/containers-as-a-service</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">28th December, Blog #4</a></h2>

<h2>Containers as a Service</h2>

<p>At a simple level, Infrastructure-as-a-Service deals with virtual machines, Platform-as-a-Service deals with applications, and Software-as-a-Service deals with users. I&rsquo;ve <a href="http://blog.docker.com/2014/07/dockercon-video/">spoken a few times</a> about Containers-as-a-Service(CaaS) &ndash; the idea that containers will become a new meaningful unit of currency in cloud computing. I&rsquo;ve also <a href="http://www.cloudcredo.com/pulling-paas-to-pieces/">written about the ramifications of CaaS for PaaS</a>.</p>

<p>The hottest debate in the container ecosystem seems to be whether to use containers as single processes or multi-process virtual machines. The Docker folks seem to encourage the use of single process containers &ndash; a view I&rsquo;m supportive of, following principles from software development, such as single responsibility and inversion of control. The alternative approach is to use containers as virtual machines with many processes. The virtual machine approach seems to resonate well with the current generation of operating systems and configuration management tooling.</p>

<p>I believe both approaches will continue to thrive for some time. The true value in Docker lies in the packaging and portability of containers, and this holds true whether you&rsquo;re packaging filesystems for a single process or a number of processes. Containers used as virtual machines will quickly erode the IaaS market &ndash; if only for their portability, speed, and density. Consumers and producers can gain benefits when choosing the CaaS abstraction over IaaS.</p>

<p>Over time there will be a move towards per-process containers, away from virtual machine-like containers, as the deployment and orchestration benefits from this approach become clearer. Just as SOLID, and TDD took time to gain momentum in software development so the correct patterns for containers will gain traction over time.</p>

<p>We will also see increasing numbers of customised operating systems, designed to run with the Linux kernel but providing a subset of the functionality, tuned for single-purpose containers. <a href="http://osv.io/">OSv</a> is a great example of this. I also think we&rsquo;re likely to see an increasing number of container host OSs, presenting something that looks like a Linux kernel to hosted containers, under development. The boundaries between hypervisor and namespaced kernel will blur.</p>

<p>The other main areas for innovation will be storage and networking. Providing containers with reliable storage for mutable state is challenging. The ClusterHQ folks have made great progress in this area using ZFS-on-Linux in <a href="https://github.com/clusterhq/flocker">Flocker</a>. There are also exciting developments in the networking space from <a href="http://socketplane.io/">SocketPlane</a> and <a href="https://github.com/zettio/weave">Weave</a> &ndash; simplifying multi-host container networking.</p>

<p>CaaS solutions have already emerged from the big cloud players; you can easily host containers on GCE, AWS, and Azure. <a href="http://www.rancher.io/">Rancher</a> looks to enable CaaS on any infrastructure. Pivotal&rsquo;s <a href="https://github.com/pivotal-cf-experimental/lattice">Lattice</a> enables operators to deliver their own CaaS, as does its big brother Cloud Foundry. These solutions are currently largely focused towards Docker but I&rsquo;m sure we&rsquo;ll see Rocket and alternatives emerge.</p>

<p>Whilst the future may look bright for containers, there are some warning signs. Multi-tenant container isolation and security are currently far from production ready. It also seems that choosing a layered filesystem beneath your containers can be a risky business; I&rsquo;ve been bitten by few bugs.</p>

<p>I think CaaS will grow exponentially over the next few years. <a href="https://www.tutum.co/">Tutum</a> are building the first pure CaaS I&rsquo;ve seen. They attracted $2.65M in seed funding this year. I&rsquo;m sure they&rsquo;ll have plenty of competition in the near future.</p>

<p><a href="https://www.youtube.com/watch?v=02KRAshCG0w">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Heterogeneous Workforce]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/27/the-heterogeneous-workforce/"/>
    <updated>2014-12-27T10:20:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/27/the-heterogeneous-workforce</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">27th December, Blog #3</a></h2>

<h2>The Heterogeneous Workforce</h2>

<p>I enjoy regularly visiting and speaking at tech conferences. They&rsquo;re a great way to stay abreast of trends and keep a fresh perspective on how the industry is delivering value. Unfortunately I&rsquo;m usually dismayed at the homogeneous composition of the conference attendees; the overwhelming majority are white males, like myself.</p>

<p>As a company CEO I see this as a tremendous waste. The key role I play in the company is the recruitment and retention of the members of our great team. Enlarging the pool of resource I can draw from will only increase the quality of the team, the diversity of opinions, and create a balanced working environment. I&rsquo;m not trying to get on my moral high horse; I want a better team so I can make more money.</p>

<p>If you&rsquo;re interested in PaaS, distributed systems, and Extreme Programming, please do contact <a href="http://www.cloudcredo.com/contact-us/">CloudCredo</a> &ndash; especially if you don&rsquo;t &lsquo;fit the mould&rsquo;. We&rsquo;re looking for fast learners and good communicators. I&rsquo;d love to think there&rsquo;s a pool of untapped skills out there I can use to help build our team. I can&rsquo;t promise to run the perfect company, but I can promise to try.</p>

<p><a href="https://www.youtube.com/watch?v=YYxbzdbKvPo">More Christmas UKG!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Foundry Summit 2014]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/26/cloud-foundry-summit-2014/"/>
    <updated>2014-12-26T08:39:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/26/cloud-foundry-summit-2014</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">26th December, Blog #2</a></h2>

<p>I wrote this blog back in June but didn&rsquo;t have time to publish it. No time like the present.</p>

<h2>Cloud Foundry Summit 2014</h2>

<p>Now the dust has settled following the CF Summit I thought it a good time to note some of the lasting impressions.</p>

<p>CF Summit was a great conference. The buzz and energy around the place was tangible. This year&rsquo;s host, Andrew Clay Shafer, gave the event a friendly, personable feel, and also has(had) great hair. The big hitters from the Cloud Foundry community were present, along with a newer users from a diverse range of organisations.</p>

<p>Personally, I felt the Summit represented the emergence of Cloud Foundry as the leading enterprise PaaS. I backed Cloud Foundry from day one, and I&rsquo;ve been vocal about the <a href="http://blog.hatofmonkeys.com/blog/2013/06/30/when-to-pass-on-a-paas/">shortcomings of other PaaSes that fall short of CF</a>. Witnessing some of the biggest names in tech queuing up to take the stage to endorse Cloud Foundry was immensely gratifying. The corollary to those endorsements was the quantity of real world Cloud Foundry success stories in the talks; Cloud Foundry has broken through, and proven its worth.</p>

<p>One of the chief reasons for the dramatic rise in enterprise adoption of Cloud Foundry has been the <a href="http://www.cloudcredo.com/cloudcredo-joins-the-cloud-foundry-foundation/">formation of the CF Foundation</a>. The Foundation members were well represented at CF Summit, from small innovators such as CloudCredo, to tech giants such as IBM and Cisco. It&rsquo;s fantastic to see the Cloud Foundry ecosystem crystallise as a Foundation to move the project forward.</p>

<p>The noticeable trend amongst the Summit attendees was big businesses realising the importance of speed. Canopy are shining example of this; formed from large enterprises but able to quickly and effectively <a href="http://canopy-cloud.com/">make use of outstanding new technologies</a>. I fear for their competition; it&rsquo;s striking when organisations decisively deliver capability at this scale.</p>

<p>We were overjoyed with the Summit from a CloudCredo perspective. The ecosystem&rsquo;s response to our work with them was fantastic. We are proud our work was mentioned in the following talks:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=hy_huSXghI8">Ben Hale&rsquo;s Buildpack Talk</a></li>
<li><a href="https://www.youtube.com/watch?v=eQhRl9GYGpQ">Warner Music</a></li>
<li><a href="https://www.youtube.com/watch?v=YMNt6Gn3yaI">Canopy</a></li>
<li><a href="https://www.youtube.com/watch?v=2e0XgGevKhg">Cisco</a></li>
<li>James Bayer &ndash; Cloud Foundry Roadmap</li>
<li>Tammer Saleh and Chris Brown &ndash; Cloud Foundry Data Services</li>
<li><a href="https://www.youtube.com/watch?v=nmapwrs2M9c">Ferdy&rsquo;s BOSH/Docker talk</a></li>
<li><a href="https://www.youtube.com/watch?v=IP0fpP_Nl4I">My Decker talk</a></li>
</ul>


<p>We&rsquo;d love to be able to add your organisation&rsquo;s name to that list. Please <a href="http://www.cloudcredo.com/contact-us/">get in contact</a> to talk about how we can help you deliver with Cloud Foundry.</p>

<p><a href="https://www.youtube.com/watch?v=8CFESsXwntk">Christmas Garage!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Twelve Blogs of Christmas]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/"/>
    <updated>2014-12-25T12:19:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas</id>
    <content type="html"><![CDATA[<h2><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">25th December, Blog #1</a></h2>

<h3>Twelve blogs, twelve days</h3>

<p>I&rsquo;ve got a backlog of half-formed blog posts (backblog?) that have been hanging around, like bad smells, for a while. I&rsquo;ve decided to get them all done and out over Christmas. I&rsquo;m cheating by imposing the following restrictions:</p>

<ul>
<li>This is the first blog and counts as a blog post even though it&rsquo;s a meta-post</li>
<li>I reserve the right to post days, or even weeks, late. I&rsquo;m in <a href="http://en.wikipedia.org/wiki/Sark">Sark</a> for some of Christmas and I will be burned alive in a <a href="http://en.wikipedia.org/wiki/The_Wicker_Man_%281973_film%29">wicker man</a> if I&rsquo;m seen using a laptop</li>
<li>I reserve the right to post nonsense due to Christmas-related alcohol abuse</li>
<li>I reserve the right to blame alcohol for nonsense I&rsquo;ve posted while sober</li>
<li>I have about eight posts lined up, most of which are nonsense</li>
<li>The remaining three posts are TBC and are guaranteed to be nonsense</li>
<li>I reserve the right to edit/delete all blogs at a later date once I realise how nonsensical they are</li>
</ul>


<h3>Random asides</h3>

<p>I&rsquo;ve noticed the vast majority of my traffic is from the USA. As part of my single-handed mission to bring back UK Garage, and further its influence in the world, I will be linking to some of the UKG greats at the end of each blog post.</p>

<p><a href="https://www.youtube.com/watch?v=vEtWdI9FByA">Bo selecta!</a></p>

<p>Let the blogging commence!</p>

<h3>Articles</h3>

<ol>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/25/the-twelve-blogs-of-christmas/">The Twelve Blogs of Christmas</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/26/cloud-foundry-summit-2014/">Cloud Foundry Summit 2014</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/27/the-heterogeneous-workforce/">The Heterogeneous Workforce</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/28/containers-as-a-service/">Containers as a Service</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/29/twelve-factor-enterprise/">Twelve Factor Enterprise</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/30/paasaap-and-the-distro-wars/">PaaSaaP and the Distro Wars</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2014/12/31/multi-site-cloud-foundry/">Multi-Site Cloud Foundry</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2015/01/01/mutable-state/">Mutable State</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2015/01/02/service-foundry/">Service Foundry</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2015/01/03/the-problems-with-paas/">The Problems With PaaS</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2015/01/04/how-i-build-stuff/">How I Build Stuff</a></li>
<li><a href="http://blog.hatofmonkeys.com/blog/2015/01/05/the-cloudcredo-way/">The CloudCredo Way</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker, Investors, and Ecosystems]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/12/03/docker/"/>
    <updated>2014-12-03T09:13:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/12/03/docker</id>
    <content type="html"><![CDATA[<h3>Rocket</h3>

<p>As you&rsquo;re probably aware by now &ndash; CoreOS have released a new container runtime called &lsquo;<a href="https://coreos.com/blog/rocket/">Rocket</a>&rsquo;. Rocket will inevitably be perceived as a reaction, and competitor, to Docker. The language in CoreOS&rsquo;s Rocket blog post suggests Docker have deviated from CoreOS&rsquo;s preferred path, and the tone suggests an accusation of betrayal. The timing of CoreOS&rsquo;s announcement, the week before DockerCon EU, implies a deliberate attempt to undermine Docker&rsquo;s marketing.</p>

<h3>Reaction</h3>

<p>GigaOM have published a great summary of the community&rsquo;s reaction <a href="https://gigaom.com/2014/12/02/why-coreos-just-fired-a-rocket-at-docker/">here</a>. Given Docker&rsquo;s amazing ecosystem and adoption levels I&rsquo;m actually quite surprised more people haven&rsquo;t come out in strong support of Docker. Solomon Hykes has exactly three things to say (followed by a subsequent thirteen) <a href="https://news.ycombinator.com/item?id=8682525">here</a>.</p>

<h3>The Changing Docker</h3>

<p>I spoke at <a href="http://blog.docker.com/2014/07/dockercon-video/">DockerCon 2014 about the Cloud Foundry/Docker integration</a> project I&rsquo;d been working on. This work has now been subsumed into the <a href="https://www.youtube.com/watch?v=e76a50ZgzxM">Docker on Diego</a> work which is beginning to form the core of Cloud Foundry V3. While working on the initial proof of concept I had regular communication with the people at Docker. I found them friendly and open to the idea of using Docker containers as another deployable unit within Cloud Foundry.</p>

<p>Once Docker <a href="http://thenewstack.io/docker-sets-sights-on-enterprises-with-40-million-investment/">raised their $40M investment</a> the tone changed. Docker became a &lsquo;<a href="https://www.docker.com/whatisdocker/">platform</a>&rsquo;. Docker&rsquo;s collaboration with Cloud Foundry, to use Docker inside Cloud Foundry, <a href="https://docs.google.com/document/d/1IBfDDnn_Kr0_P8iUubHX3RdvGxQ9isXczhjLW3pMZiM/pub">seemed to stall</a>. It appeared Docker were trying to eat their ecosystem. Was investor pressure for a huge return causing Docker to try to capture too many markets rather than focusing on their core?</p>

<h3>Cloud Foundry Future</h3>

<p>Cloud Foundry will continue to orchestrate various units of currency; applications via buildpacks, containers via Docker, and potentially containers via Rocket. My company, <a href="http://www.cloudcredo.com/">CloudCredo</a>, is already looking at what a Rocket integration with Cloud Foundry would look like. <code>cf push https://storage-mirror.example.com/webapp-1.0.0.aci</code> is on the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration Management isn't Stupid, but it Should Be]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2014/03/15/configuration-management-isnt-stupid/"/>
    <updated>2014-03-15T10:37:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2014/03/15/configuration-management-isnt-stupid</id>
    <content type="html"><![CDATA[<p>Devops is about holistic, systems-orientated thinking; it&rsquo;s been misappropriated to be about configuration management. I&rsquo;ve noticed a decline in the number of people from a development background at Devops conferences &ndash; maybe they&rsquo;ve lost interest in talking about Puppet vs Chef vs Salt vs Ansible vs CFEngine vs X vs Y vs Z?</p>

<h3>Bricks</h3>

<p>The role of infrastructure should be to provide reliable, consumable bricks to enable innovation at higher levels. If we create beautiful, unique, novel bricks it becomes impossible to build houses. This is a problem I see regularly with OpenStack deployments; they&rsquo;re amazing, wonderful, unique, organic. I cannot, however, easily deploy platforms to them.</p>

<h3>Configuration Management</h3>

<p>This issue manifests itself in deployments orchestrated by configuration management.</p>

<ul>
<li>Complexity &ndash; you can do some amazing things in Chef as you have the power and flexibility to run arbitrary Ruby during your deployments. I have seen this abused many times &ndash; and done this myself. Too much clever branching logic and too little reliable code</li>
<li>Determinism &ndash; configuration management tools often provide a thin veneer over non-deterministic operating system commands</li>
<li>Reproducibility &ndash; server scaling operations often fail due to poor dependency management and non-deterministic actions</li>
</ul>


<p>Configuration management is too focused on innovation at the server level rather than thinking about the entire system. Devops has become a silo.</p>

<h3>A Better Way</h3>

<p>There are some tools and patterns emerging to tackle these problems.</p>

<ul>
<li><a href="http://foodfightshow.org/2013/07/immutable-infrastructure.html">Immutable infrastructure</a> &ndash; remove the drift</li>
<li><a href="https://www.docker.io/">Docker</a>/<a href="https://www.youtube.com/watch?v=QslNszh3jfY">Decker</a> &ndash; testable, simple, small, disposable containers</li>
<li><a href="http://nixos.org/nix/">Nix</a> &ndash; declarative, deterministic package management</li>
<li><a href="https://github.com/cloudius-systems/osv">OSV</a> &ndash; stupid(brilliant) operating system to enable innovation</li>
<li><a href="http://bosh.cfapps.io/">BOSH</a> &ndash; stupid(brilliant) tool to deploy complex distributed systems</li>
<li><a href="http://mesos.apache.org/">Mesos</a> &ndash; schedule commands(jobs) to run in a distributed environment</li>
</ul>


<h3>&lsquo;Infrastructure as Code&rsquo; to &lsquo;Infrastructure as Good Code&rsquo;</h3>

<p>We need <a href="http://www.codeproject.com/Articles/60845/The-S-O-L-I-D-Object-Oriented-Programming-OOP-Prin">SOLID</a> for infrastructure. We need to develop standardised, commoditised, loosely coupled, single-responsibility components from which we can build higher-order systems and services. Only then will we be enabling innovation higher up the value chain.</p>

<p>Devops should be about enabling the business to deliver effectively. We&rsquo;ve got stuck up our own <del>arses</del> configuration management.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Pass on a PaaS]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2013/06/30/when-to-pass-on-a-paas/"/>
    <updated>2013-06-30T18:04:00+01:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2013/06/30/when-to-pass-on-a-paas</id>
    <content type="html"><![CDATA[<p>There&rsquo;s no point pretending I don&rsquo;t love &lsquo;The PaaS&rsquo;. I do. I have spent too much of my career fighting battles I shouldn&rsquo;t be fighting; re-inventing similar-looking systems time and time again. The idea I could just drop an application into a flexible platform and expect it to run, without consuming my entire life for the preceeding three months writing Chef cookbooks and wrestling EC2, sounds fantastic.</p>

<h3>Cloud Foundry</h3>

<p>Having played with Heroku, and being dismayed at not being able to play with my own Heroku, I was overjoyed when VMWare released Cloud Foundry. I created a Vagrant box on the Cloud Foundry release day and began distributing it to clients. I worked with one of my clients at the time, OpenCredo, to develop and deploy one of their new services to a Cloud Foundry installation I created. I believe this was the first SLA-led production deployment of Cloud Foundry globally.</p>

<p>I spoke about the rationale behind running/developing your own PaaS at QCon London 2012. I also discussed some of the use cases I&rsquo;d fulfilled using PaaS, including OpenCredo&rsquo;s.</p>

<p><a href="http://www.infoq.com/presentations/Lessons-Learned-in-Deploying-PaaS">QCon 2012 &ndash; Lessons Learned Deploying PaaS</a></p>

<h3>OpenShift</h3>

<p>I was similarly happy when I heard RedHat had bought Makara, a product I&rsquo;d briefly experimented with, and were looking at producing their own PaaS. I&rsquo;ve used RedHat-based systems for many years with great success, have always found <a href="http://blog.hatofmonkeys.com/blog/2012/01/15/system-build-reproducibility/">YUM/RPM great to use</a>, and was apparently the 7th person in the UK to achieve RedHat Architect status. A RedHat-delivered PaaS would surely be the panacea for all my problems.</p>

<p>I was scoping a large project at this time with availability as a prime concern. It occurred to me that I could use two turnkey PaaSes simultaneously, Cloud Foundry and OpenShift, such that if there was an issue with either I could simply direct all traffic to the other PaaS. I discussed the deployment and progress at DevopsDays.</p>

<p><a href="http://new.livestream.com/devopsdaysorg/devopsdaysRome/videos/4516372">DevopsDays Rome 2012 &ndash; How I Learned to Stop Worrying and Love the PaaS</a> &ndash; I start about 32 minutes in.</p>

<h3>From Dream to Reality</h3>

<p>Unfortunately, the project didn&rsquo;t quite work out as planned. We had a number of issues with OpenShift which meant we had no choice but to withdraw it from production usage. Scalability was an enormous problem; bringing an application to production scale was a sub-twenty second operation in Cloud Foundry; it took fourty-eight hours plus in OpenShift. We had to write our own deployment and orchestration layer for OpenShift based on Chef and shell &ndash; Cloud Foundry has the fantastic BOSH tool enabling deployment, scaling, and upgrades. These reasons, alongside some nasty bugs and outages, meant we were unable to use OpenShift for our deployment.</p>

<p>Beyond this I feel OpenShift, like many &lsquo;PaaSish&rsquo; systems, has got the focus wrong. There seems to be a plethora of container-orchestration systems being produced at the moment, which are really just a slight re-focus on the IaaS abstraction layer. OpenShift is in danger of falling into this trap. PaaS needs to remain focussed on the application as the unit of currency, and not the container or virtual machine. It looks entirely possible (and would make an interesting project) to run Cloud Foundry inside OpenShift, illustrating the conceptual difference.</p>

<p>We settled on using distributed Cloud Foundry instances across diverse IaaS providers to deliver the project; it was a great success. I blogged about it for Cloud Foundry&rsquo;s blog.</p>

<p><a href="http://blog.cloudfoundry.com/2013/04/30/uk-charity-raises-record-donations-powered-by-cloud-foundry/">CloudFoundry.com blog post &ndash; UK Charity Raises Record Donations Powered by Cloud Foundry</a></p>

<h3>Which PaaS?</h3>

<p>I&rsquo;ve remained supportive of RedHat&rsquo;s efforts to deliver a PaaS solution but fear they&rsquo;re not quite there yet. I organised a <a href="http://www.meetup.com/London-PaaS-User-Group-LOPUG/events/120336492/">London PaaS User Group meetup  to help RedHat to put their side of the case across to the London community</a>. It sounded like they had some exciting developments in the pipeline but even with the new features it&rsquo;s likely we would have been unable to deliver the enterprise-grade services our project required.</p>

<p>Perhaps Redhat&rsquo;s customer base are largely systems administrators rather than developers. Perhaps Redhat have more experience at deploying and managing servers than applications. For whatever reason, I think it would be a denigration of PaaS to allow it to be misconstrued as container-based IaaS. Containers can be a by-product of service provision but should not be the focus of PaaS.</p>

<p>Cloud Foundry isn&rsquo;t perfect but, at the moment, is the only PaaS product I&rsquo;d recommend to anyone looking to make a long-term investment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Build Reproducibility]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2012/01/15/system-build-reproducibility/"/>
    <updated>2012-01-15T09:59:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2012/01/15/system-build-reproducibility</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been on the receiving end of build reproducibility rants from <a href="http://www.freakingnews.com/pictures/34500/Cyclops-Teletubbies-34621.jpg">developers</a> at plenty of conferences. Their bile is usually aimed at <a href="http://maven.apache.org/general.html#snapshot-artifacts">Maven&rsquo;s snapshot functionality</a>. I&rsquo;ve often questioned how reproducible their systems are; I&rsquo;m usually met by a blank look.</p>

<p>I&rsquo;ve always aimed to make system builds reproducible, but with little success. Gem, pear, pecl, rpm, license agreements, configure/make/make install: they all take their toll. This can lead to inconsistent builds between environments &ndash; or even in a single tier &ndash; due to scaling up/down.</p>

<p>As I&rsquo;ve tended to use RPM-based systems (<a href="http://www.redhat.com/certification/rhca/">misspent youth</a>), I&rsquo;ve attempted, wherever possible, to get all non-configuration files on a server into RPMs. I&rsquo;ve been more promiscuous with configuration management, moving from home grown, to <a href="http://cfengine.com/">Cfengine</a>, via <a href="http://puppetlabs.com/">Puppet</a>, to <a href="http://www.opscode.com/chef/">Chef</a>. I&rsquo;m currently using chef-solo, with tooling such as <a href="https://github.com/lusis/Noah">Noah</a> and <a href="http://puppetlabs.com/mcollective/">MCollective</a> for orchestration. Don&rsquo;t even mention the number of deployment/ALM tooling solutions I&rsquo;ve been through(although <a href="https://github.com/capistrano/capistrano/wiki">Capistrano</a> has never annoyed me to any great extent).</p>

<p>Even with long term usage of RPMs, build reproducibility has been far from simple. <a href="http://www.redhat.com/red_hat_network/">RH Satellite</a>/<a href="http://spacewalk.redhat.com/">Spacewalk</a> should make this easy, but unfortunately it&rsquo;s a bloated mess. I&rsquo;ve usually resorted to simple apache/createrepo, but this poses its own problems. Do you have a repo per environment? How do you track which servers were built against which repo? How do you roll out updates in a manageable fashion?</p>

<p>I&rsquo;ve created a simple setup called <a href="https://github.com/hatofmonkeys/yumtags">Yumtags!</a> to address some of these issues. The basic idea is that you can drop RPMs in to a directory, and then &ldquo;freeze&rdquo; the directory at that point in time by creating and storing repository metadata against a tag. This tag can then be used, perhaps in a chef-solo-driven repository definition, to update, build, and reproduce systems in a known state. It currently features simple JSON-driven integration for CI systems, so RPM-based integration pipelines can be easily automated. There&rsquo;s a million and one things missing from it, but now it does the basic story I&rsquo;ve shared it for others to hack on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring-Driven Operations]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2012/01/15/monitoring-driven-operations/"/>
    <updated>2012-01-15T08:11:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2012/01/15/monitoring-driven-operations</id>
    <content type="html"><![CDATA[<p><strong>RAMBLING BLOG POST ALERT</strong></p>

<p>Monitoring sucks.</p>

<p>Following the &ldquo;if it hurts, do it more often&rdquo; mantra that has driven the success of patterns such as <a href="http://continuousdelivery.com/">Continuous Delivery</a>, there might be some value in jumping head-first into the world of monitoring.</p>

<p>I&rsquo;ve been <a href="http://www.eatliver.com/img/2005/638.jpg">evangelising</a> to anyone that will listen, and a lot of people that won&rsquo;t, about declarative/convergent frameworks for some time now. Sometimes you have to describe how to converge (definitions may not yet exist), so I particularly enjoy working with frameworks such as <a href="http://wiki.opscode.com/display/chef/Home">Chef</a> that enable you to easily move from declarative to imperative as the need arises.</p>

<p>These two trains of thought(monitoring + system convergence) collided a while back to make me think about Monitoring-Driven Operations, i.e. that we can declare the status of the monitoring systems (that servers and services are available during expected hours) and converge the environment(s) on this desired state if there&rsquo;s a gap between observed and desired states. MDO for operations, TDD for developers.</p>

<p>It turned out I <a href="http://dev.hubspot.com/bid/65871/Monitoring-Driven-DevOps">wasn&rsquo;t alone</a> in thinking about monitoring from this perspective.</p>

<p>Reusing the application behaviours in production is a natural, logical extension of <a href="blog/2011/11/13/the-testing-pipeline/">the testing pipeline</a>. Were we able to ensure that the <a href="blog/2012/01/15/bridging-the-gap-between-functional-and-non-functional/">behaviours include non-functional requirements</a>, would it be possible to use these monitored behaviours to converge an environment towards a state that passes all scenarios?</p>

<p>The missing link here is the imperative element. We can declare the desired state for an environment (<a href="http://auxesis.github.com/cucumber-nagios/">cucumber-nagios</a> is a good start), however we need a framework to express <em>how we get there</em>. I think Chef/Puppet can help with a lot of the hard labour here, but I don&rsquo;t think that either, in their current formats, are appropriate to converge a service from a failed monitoring check.</p>

<p><a href="https://github.com/cloudfoundry/">Cloud Foundry</a>(brilliant) uses a health manager, message bus, and cloud controller interacting to accomplish something similar. In this situation the cloud controller knows how to converge the state of the environment when the health manager observes a disparity between observed and desired states.</p>

<p>I&rsquo;m thinking about developing a system that works in the following way(&ldquo;<em>The Escalator</em>&rdquo;). Please get in contact if you&rsquo;ve got any feedback.</p>

<ul>
<li>Barry McDevops declares an escalation pattern for his environments. These are the <em>levels</em> of escalation for convergence that failing checks can be matched to. As a crude example:

<ol>
<li> Create account with IaaS provider</li>
<li> Create core networking and support infrastructure</li>
<li> Create tier networking and all VMs</li>
<li> Create an individual VM</li>
<li> Converge VM with Chef</li>
<li> (Re)deploy application</li>
</ol>
</li>
<li>Barry creates a series of monitoring <em>checks</em> for the non-functional requirements

<ol>
<li> IaaS provider is online</li>
<li> (per node) ICMP ping reply</li>
<li> (per node) app and DB services are online</li>
<li> (per tier) app and DB services are online</li>
<li> Smoke check of application</li>
</ol>
</li>
<li>Barry maps each monitoring <em>check</em> to an escalation <em>level</em>

<ul>
<li>Check 1 => Level 1</li>
<li>Check 2 => Level 4</li>
<li>Check 3 => Level 5</li>
<li>Check 4 => Level 3</li>
<li>Check 5 => Level 6</li>
</ul>
</li>
<li>Once engaged, the monitoring system will quiesce for 30 seconds, observe the highest level of required escalation, and then ask the escalation system to take that level of action (and all levels below it).</li>
</ul>


<p>As examples:
&ndash; If there is nothing in place (failed IaaS provider or a new system) &ndash; an entire new environment is built from scratch (escalation steps 1 through 6).
&ndash; If a node fails: a new node is built, converged, and deployed to (steps 4 through 6).
&ndash; If the application fails the smoke test, the application is redeployed (step 6).</p>

<p>Obviously it is up to Barry to ensure his escalation steps are sensible, i.e. use multiple IaaS providers, redeploy previous versions of applications if they persistently fail smoke tests. Each escalation step should declare a quiescence period, during which no further actions will be taken. There&rsquo;s no point attempting to deploy an application if you have no nodes.</p>

<p>If an escalation process fails, the monitoring system could attempt a re-convergence if necessary or contact an administrator.</p>

<p>This overlaps significantly with a couple of discussions: <a href="http://wiki.opscode.com/display/chef/Cluster+Orchestration">here</a> and <a href="http://wiki.opscode.com/display/chef/Management+of+External+Entitites">here</a> at the recent <a href="http://wiki.opscode.com/display/chef/Opscode+Community+Summit+1">Opscode Community Summit</a>, so perhaps someone else is already creating something similar with Chef.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bridging the Gap Between Functional and Non-Functional]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2012/01/15/bridging-the-gap-between-functional-and-non-functional/"/>
    <updated>2012-01-15T07:54:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2012/01/15/bridging-the-gap-between-functional-and-non-functional</id>
    <content type="html"><![CDATA[<p>According to the <a href="http://agilemanifesto.org/principles.html">principles behind the Agile Manifesto</a></p>

<blockquote><p>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</p></blockquote>

<p>As I&rsquo;m from an <a href="http://cache.blippitt.com/wp-content/uploads/2011/03/Mushroom-Cloud.jpg">operations</a> background, I&rsquo;ve always had great trouble communicating with the customer over requirements that have been relevant to my domain. The usual situation is that the &ldquo;customer&rdquo;, often the product owner, views the working i.e. functionally complete software on a developer&rsquo;s machine, but bringing this to an operational service level is an afterthought (until it goes offline, and the real customers start complaining).</p>

<p>Traditionally, capturing these specifications has fallen under the umbrella of &ldquo;non-functional requirements&rdquo;. As <a href="https://twitter.com/tomsulston">Tom Sulston</a> pointed out to me, this suggests requirements that <a href="http://cache.blippitt.com/wp-content/uploads/2011/03/Mushroom-Cloud.jpg">aren&rsquo;t working</a>, which is precisely the opposite of what we&rsquo;re attempting to express.</p>

<p>I&rsquo;ve sought to tackle this in a couple of ways.</p>

<ol>
<li><p>Spread FUD throughout the non-technical customer base.</p>

<ul>
<li>&ldquo;Do you want it to explode?&rdquo;</li>
<li>&ldquo;NO!&rdquo;</li>
<li>&ldquo;Well you should ask for non-exploding software in your stories then!&rdquo;.</li>
</ul>
</li>
<li><p>Get the team in a room together and express &ldquo;cross-cutting concerns&rdquo; (I <a href="http://www.cockneyrhymingslang.co.uk/slang/half_inch">half-inched</a> the idea from <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a>) that span the project as a whole.</p></li>
</ol>


<p>I haven&rsquo;t been happy with the results of either approach, so I&rsquo;d be interested to talk to anyone with a satisfactory solution in this space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment - A Vanity Metric?]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2012/01/15/continuous-deployment-a-vanity-metric/"/>
    <updated>2012-01-15T07:12:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2012/01/15/continuous-deployment-a-vanity-metric</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently seen a few articles/presentations carrying the claim &ldquo;481,000 deployments a day!&rdquo;, &ldquo;Deployment every 3 seconds!&rdquo;, or &ldquo;We deploy more frequently than we breathe &ndash; or we sack the junior ops guy!&rdquo;. Very exciting.</p>

<p>Having the capability to deploy frequently is important for a variety of reasons; fast feedback, quickly realising value, reducing risk deltas, increasing confidence, and so on. However, I also think that frequent deployment is useless without making use of that feedback.</p>

<p>Continuous Deployment is an enabler of fast feedback, but it&rsquo;s not the end goal. If the feedback isn&rsquo;t utilised by product owners to inform their decisions, there&rsquo;s little point in creating it. The practice becomes a local optimisation.</p>

<p>I&rsquo;ve deliberately chosen to differentiate Continuous Delivery from Continuous Deployment here, as I believe Continuous Delivery implies that <a href="blog/2011/11/06/automating-value/">value</a> is being delivered, whereas Continuous Deployment suggests focusing on deploying frequently.</p>

<p>We need to optimise cycle time for the whole business, not just the dev/ops/devops/&lt;current silo label> team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Testing Pipeline]]></title>
    <link href="http://blog.hatofmonkeys.com/blog/2011/11/13/the-testing-pipeline/"/>
    <updated>2011-11-13T11:11:00+00:00</updated>
    <id>http://blog.hatofmonkeys.com/blog/2011/11/13/the-testing-pipeline</id>
    <content type="html"><![CDATA[<p>I was fortunate in being able to attend <a href="http://citconf.com/london2011/">Citcon</a> this weekend and met some wonderful, talented people. I proposed a couple of openspaces, one loosely based on <a href="blog/2011/11/06/automating-value/">automating value</a> and the other around test reuse.</p>

<p>I&rsquo;ve been thinking for a while about how I see people (including myself) rewrite the same business logic in our behavioural specifications, for our integration tests, for our performance tests, for our security tests, and for our behaviour-driven monitoring. This seems counter-intuitive to someone as lazy as I am.</p>

<p>I think we should reconsider the deployment pipeline as a testing pipeline. The purpose of the pipeline is to increase confidence in the release candidate as the stages are passed. These stages can be considered as hoops for the release candidates to jump through. As new functionality is added, so the hoops will need to be tailored to ensure the new functionality is fit for purpose.</p>

<p>Here&rsquo;s an idea of a delivery pipeline I&rsquo;ve seen used many times before. It&rsquo;s in no way ideal, nor suitable for every use case, but it provides an example for discussion:</p>

<p>Behaviours(product owner) &ndash;> unit(dev) &ndash;> <strong>code</strong>(dev) &ndash;> VCS &ndash;> unit tests(CI) &ndash;> behavioural tests(UAT) &ndash;> load tests(staging) &ndash;> security tests(staging) &ndash;> monitoring(production)</p>

<p>The issue I&rsquo;m attempting to highlight is that as desired functionality is added by the product owner (typically as a feature in the backlog) and committed to a release candidate by the developer, so the hoops need to ensure that the new functionality is delivered as specified, and no regression bugs have been introduced. This typically involves either the new functionality going untested through load/security/monitoring, or a developer/operations person having to rewrite the new business logic repeatedly in the DSLs of whichever tools are used to create the hoops.</p>

<p>I&rsquo;m currently using <a href="http://auxesis.github.com/cucumber-nagios/">cucumber-nagios</a> to reuse our functional behaviours for monitoring and I&rsquo;ve also had some success using <a href="http://www.pushtotest.com/">PushToTest</a> with Selenium from Cucumber. I&rsquo;ve yet to look at how to tackle security requirements. Please get in contact with me if you&rsquo;ve had any success reusing your business logic assertions throughout your pipeline; I&rsquo;d be very interested to hear about your experiences.</p>

<p>My (current) vision would be that, either as a part of or along with a release candidate, an artefact is created that outlines the business value assertions made about the candidate. As the candidate then moves through the pipeline, so the hoops are updated with the relevant assertions they need to test about the candidate. These could be a certain number of virtual users through the user journeys in the expected ratios, lack of injection holes in the application, the application&rsquo;s ability to degrade gracefully through various failure modes, and anything else that&rsquo;s required to establish confidence in the release candidate.</p>

<p>You should be able to make an API call to cloud-based testing providers(such as <a href="http://www.soasta.com/">Soasta</a>) so they can use your artefact to automatically test the behaviour of your application, such as external load and security tests. The feedback from these providers can be returned to your CI server for tracking over time, and form a basis for diagnosis of any assertion failures.</p>

<p>Without a fully-automated testing pipeline, I see one of two outcomes regularly at the moment:</p>

<ul>
<li>New functionality is not tested before release. This implies risk.</li>
<li>Releases are delayed while scripts are updated, and manual load/security tests booked with vendors and executed. This inhibits business agility and delays feedback cycles.</li>
</ul>


<p>I&rsquo;m attempting to write an abstraction layer for Cucumber scenarios to be reused in load tests, if you&rsquo;re interested in helping please get in touch. I&rsquo;ll post it on the <a href="https://github.com/hatofmonkeys">Githubs</a> once I&rsquo;ve got something small working.</p>
]]></content>
  </entry>
  
</feed>
